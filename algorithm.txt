class HierarchicalNeuralClassifier - класс, в котором реализуется ИНК

Используемые библиотеки:

связка keras+autotree, либо чистый tensorflow

Метод __init__:

units - число скрытых нейронов в базовой сети; 3
activation; relu
optimizer; sgd
other_rate - доля класса "другое" в каждом узле; 0.1
параметры оптимизатора;
regularization; None
unite_timeout; 5
unite_start; 10
threshold; 0.2
threshold_ratio; 0.5
validation_split; 
validation_data;
patience;
batch_size;
loss;

Метод fit(X, y, epochs=1, verbose=True) 

Метод build_model(units, input_shape, output_shape)

Метод fit_node()


--------Описание алгоритма-----------------

fit(X, y,....):
	
	self.models = {}
	Создаём root, в root ставим build_model()

	self.X = X
	self.models[0] = model
	Пихаем в self.tree индекс 0

	Останавливаемся если: в узле осталось два класса
	Закончились pre-defined эпохи
	
	while Voting.flag:
		model.fit(X, to_one_hot(y), callbacks=[Voting, EarlyStopping])
		class_map = Voting.map
		final_map = connect_map(class_map, old_map)
		old_map = class_map


	class_map = Voting.map
	self.model_num = 0

	self.idx = [1, 2, 3....., N]

	0 -> 0
	1 -> 0
	2 -> 2
	3 -> 0
	4 -> 1

	struct_dict

	0 <- [1, 2, 3]
	1 <- [4]
	2 <- [2]

	for a_class in class_map.values():
		self.fit_node(voter.struct_dict[a_class], super_class)

	return self


to_one_hot - наиболее элегантный путь


fit_node(classes, super_class):
	
	---create_mask(classes)
	создаём маску для X
	mask = y in classes
	выбираем 0.1 из idx[not mask] - add_mask
	mask[add_mask] = True

	model = build_model(....)

	model.fit(X[mask], to_one_hot(y[mask]), validation_data=validation_data[mask], ....)

	tree <- class_map
	tree <- struct_dict

	for a_class in class_map.values():
		Фитируем ноду

----Если tensorflow, всё это происходит под session и строится граф









